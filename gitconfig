[user]
	email = monry84@gmail.com
	name = Tetsuya Mori
[core]
	editor = vim
	precomposeunicode = true
	commentchar = ";"
	autocrlf = input
[commit]
	template = ~/.gitmessage
[color]
	diff = auto
	status = auto
	branch = auto
[alias]
	a = add
	s = status
	i = "commit --allow-empty -v"
	c = checkout
	sw = switch
	b = branch
	m = "merge --no-ff"
	d = diff
	f = "fetch --tags --prune"
	t = tag
	g = grep
	cp = cherry-pick
	pl = pull
	ps = !git push -u origin `git rev-parse --abbrev-ref HEAD` --tags
	rp = !git remote prune origin
	rf = !"f() { if [ -z \"$1\" ]; then ORIGINAL_BRANCH=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}'); else ORIGINAL_BRANCH=$1; fi && CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD` && git fetch origin $ORIGINAL_BRANCH:$ORIGINAL_BRANCH && git fetch origin && git checkout $ORIGINAL_BRANCH && git remote prune origin && git branch -d $CURRENT_BRANCH; }; f"
	fo = !"f() { if [ -z \"$1\" ]; then ORIGINAL_BRANCH=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}'); else ORIGINAL_BRANCH=$1; fi && CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD` && git fetch origin && git fetch origin $ORIGINAL_BRANCH:$ORIGINAL_BRANCH && git remote prune origin; }; f"
	full-push = !git push --all && git push --tags
	lc = !git lfs checkout
	lf = !git lfs fetch
	lcl = !git lfs clone
	lpl = !git lfs pull
	lps = !git lfs push
	pr = !gh pr
	br = !gh browse
	re = !gh release
	ppm = !git-pr-create-merge && git remote prune origin
	smu = "submodule update"
	smur = "submodule update --remote"
	smp = "submodule foreach git pull"
	hash = !"f() { if [ -z \"$1\" ]; then git rev-parse HEAD; elif [ \"$1\" == \"-c\" ]; then git rev-parse HEAD | tr -d '\n' | pbcopy; fi; }; f"
	ha = !git rev-parse HEAD | tr -d '\n' | pbcopy
	todo = !git grep TODO
	checkout-with-lfs = "!f() { git lfs install --force --skip-smudge && git checkout $1 && git lfs pull && git lfs install --force; }; f"
	pull-with-lfs = "!f() { git lfs install --force --skip-smudge && git pull && git lfs pull && git lfs install --force; }; f"
	current-branch = symbolic-ref --short HEAD
	base-branch = !git config "branch.$(git current-branch).base"
	ignore = !curl -L -s https://www.gitignore.io/api/$@
    empty = !"f() { COMMIT_MESSAGE=${2:-\":u7a7a: Add empty commit\"}; git commit --allow-empty -m \"[MONRY-$1] ${COMMIT_MESSAGE}\"; }; f"
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[init]
	templatedir = ~/.git_template
	defaultBranch = main
[credential "https://source.developers.google.com"]
	helper = gcloud.sh
[grep]
	lineNumber = true
[pull]
    rebase = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
